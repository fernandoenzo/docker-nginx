# Avoid requests without the Host header
server {
    listen 80 default_server;
    listen [::]:80;
    server_name "";
    return 444;
}

# Redirect requests without the Host header
server {
    listen 443 ssl default_server;
    listen [::]:443 ssl;
    server_name "";
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
    return 301 https://www.example.com;
}

server {
    listen 80;
    listen [::]:80;
    server_name example.com www.example.com;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name example.com www.example.com;

    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    # If you don't want to serve a site, comment this out
    root /var/www/html;
    index index.html index.htm index.nginx-debian.html;

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ =404;
    }

    location /app {
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_pass http://127.0.0.1:8008;
    }
}

# Pi-hole Web Interface
#server {
#    listen 172.35.0.2:443 ssl;
#    server_name pihole.example.com;

#    ssl_certificate /etc/letsencrypt/live/pihole.example.com/fullchain.pem;
#    ssl_certificate_key /etc/letsencrypt/live/pihole.example.com/privkey.pem;

#    location / {
#        proxy_pass http://172.19.0.1;
#        proxy_set_header Host 172.19.0.1;
#        proxy_set_header X-Real-IP $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header X-Forwarded-Proto $scheme;
#        proxy_set_header X-Forwarded-Host $http_host;
#    }
#}

